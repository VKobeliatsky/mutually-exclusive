{"version":3,"sources":["services/common.ts","services/hooks.ts","components/page-title/page-title.tsx","services/location-extractor-service/common.ts","components/app-screen/app-screen.tsx","components/options/option.tsx","components/options/options.tsx","components/options-screen/options-screen.tsx","components/congratulation-screen/congratulations-screen.tsx","components/create-screen/create-screen.tsx","components/app/app.tsx","components/root/root.tsx","index.tsx","services/location-extractor-service/window-location-extractor-service.ts","services/location-extractor-service/location-parser.ts"],"names":["ServicesContext","createContext","Error","useServices","useContext","services","PageTitle","value","Helmet","DEFAULT_TITLE","useTitle","locationExtractor","getTitle","useOptions","getOptions","useStyles","makeStyles","root","marginTop","marginBottom","AppScreen","children","classes","title","Fade","in","appear","Box","Container","className","maxWidth","Option","name","label","onChange","FormControlLabel","control","Switch","checked","e","target","Options","options","useState","optionsToState","state","setState","updateOption","useCallback","names","Object","keys","targetIndex","indexOf","otherNames","length","slice","otherName","Math","floor","random","produce","FormGroup","map","key","reduce","option","OptionsScreen","onSubmit","submitLabel","getSubmitLabel","Card","CardContent","Typography","variant","CardActions","Button","fullWidth","color","onClick","CongratulationsScreen","onCreateClick","CreateScreen","newOption","setNewOption","hasEnoughOptions","shareLink","useMemo","getShareLink","shareLinkInputRef","useRef","updateTitle","updateSubmitLabel","addOption","push","removeOption","index","splice","isInfoShown","setInfoShown","closeInfo","showInfo","copyLinkToClipboard","current","select","setSelectionRange","document","execCommand","TextField","margin","Collapse","InputProps","endAdornment","InputAdornment","position","IconButton","Icon","onBlur","onKeyUp","keyCode","mountOnEnter","unmountOnExit","inputRef","href","startIcon","Snackbar","message","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","App","accepted","setAccepted","creating","setCreating","create","Root","Provider","rootElement","getElementById","render","constructor","location","parseQuery","parse","this","search","parseParam","parseStringParam","param","Array","undefined","parseArrayParam","queryString","params","stringify","origin","pathname","join","window"],"mappings":"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","file":"static/js/main.ebd15d75.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { LocationExtractorService } from \"./location-extractor-service\";\n\nexport interface Services {\n  locationExtractor: LocationExtractorService;\n}\n\nexport const ServicesContext = createContext<{ services: Services }>({\n  get services(): Services {\n    throw Error(\"services are not provided\");\n  },\n});\n","import { Services, ServicesContext } from \"./common\";\nimport { useContext } from \"react\";\n\nexport const useServices = (): Services => useContext(ServicesContext).services;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport const PageTitle: React.FC<{ value: string }> = ({ value }) => (\n  <Helmet>\n    <title>{value}</title>\n  </Helmet>\n);\n","import { useServices } from \"../hooks\";\n\nexport interface Params {\n  title?: string;\n  submitLabel?: string;\n  options?: string[];\n}\n\nexport interface LocationExtractorService {\n  getTitle(): string | undefined;\n  getOptions(): string[];\n  getSubmitLabel(): string | undefined;\n  getShareLink(params: Params): string;\n}\n\nexport const DEFAULT_TITLE = \"Mutually exclusive options\";\nexport const DEFAULT_SUBMIT_LABEL = \"Accept\";\n\nexport const useTitle = () => useServices().locationExtractor.getTitle();\nexport const useOptions = () => useServices().locationExtractor.getOptions();\nexport const useSubmitLabel = () =>\n  useServices().locationExtractor.getSubmitLabel();\n","import React from \"react\";\n\nimport { Container, Fade, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { PageTitle } from \"../page-title\";\nimport {\n  useTitle,\n  DEFAULT_TITLE,\n} from \"../../services/location-extractor-service/common\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"12%\",\n    marginBottom: \"12%\",\n  },\n});\n\nexport const AppScreen: React.FC<{\n  children: NonNullable<React.ReactNode>;\n}> = ({ children }) => {\n  const classes = useStyles();\n  const title = useTitle() || DEFAULT_TITLE;\n  return (\n    <Fade in appear>\n      <Box>\n        <PageTitle value={title} />\n        <Container className={classes.root} maxWidth=\"sm\">\n          {children}\n        </Container>\n      </Box>\n    </Fade>\n  );\n};\n","import React from \"react\";\n\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nexport const Option: React.FC<{\n  name: string;\n  label?: string;\n  value: boolean;\n  onChange(value: boolean): void;\n}> = ({ name, label = name, value, onChange }) => (\n  <FormControlLabel\n    control={\n      <Switch\n        checked={value}\n        onChange={(e) => onChange(e.target.checked)}\n        name={name}\n      />\n    }\n    label={label}\n  />\n);\n","import React, { useState, useCallback } from \"react\";\nimport produce from \"immer\";\n\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nimport { Option } from \"./option\";\nimport { useOptions } from \"../../services/location-extractor-service/common\";\n\ntype OptionsState = Partial<Record<string, boolean>>;\n\nexport const Options: React.FC = () => {\n  const options = useOptions();\n  const [state, setState] = useState(() => optionsToState(options));\n\n  const updateOption = useCallback(\n    (name: string, value: boolean) => {\n      const names = Object.keys(state);\n      const targetIndex = names.indexOf(name);\n      const otherNames =\n        names.length > 1\n          ? [...names.slice(0, targetIndex), ...names.slice(targetIndex + 1)]\n          : [];\n\n      const otherName =\n        otherNames[Math.floor(Math.random() * otherNames.length)];\n\n      setState(\n        produce((state: OptionsState) => {\n          if (name in state) state[name] = value;\n          if (value && otherName in state) state[otherName] = false;\n        })\n      );\n    },\n    [state]\n  );\n\n  return (\n    <FormGroup>\n      {Object.keys(state).map((name) => (\n        <Option\n          key={name}\n          name={name}\n          value={!!state[name]}\n          onChange={(value) => updateOption(name, value)}\n        />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst optionsToState = (options: string[]) =>\n  options.reduce<OptionsState>((state, option) => {\n    state[option] = false;\n    return state;\n  }, {});\n","import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { AppScreen } from \"../app-screen\";\nimport { Options } from \"../options\";\nimport { CardActions, Button } from \"@material-ui/core\";\nimport {\n  useTitle,\n  DEFAULT_TITLE,\n  useSubmitLabel,\n  DEFAULT_SUBMIT_LABEL,\n} from \"../../services/location-extractor-service/common\";\n\nexport const OptionsScreen: React.FC<{ onSubmit?(): void }> = ({\n  onSubmit,\n}) => {\n  const title = useTitle() || DEFAULT_TITLE;\n  const submitLabel = useSubmitLabel() || DEFAULT_SUBMIT_LABEL;\n\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">{title}</Typography>\n          <Options />\n        </CardContent>\n        <CardActions>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSubmit}\n          >\n            {submitLabel}\n          </Button>\n        </CardActions>\n      </Card>\n    </AppScreen>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  CardActions,\n} from \"@material-ui/core\";\n\nimport { AppScreen } from \"../app-screen\";\n\nconst CONGRATULATIONS_MESSAGE = \"Wise choice!\";\n\nexport const CongratulationsScreen: React.FC<{ onCreateClick?(): void }> = ({\n  onCreateClick,\n}) => {\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">{CONGRATULATIONS_MESSAGE}</Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onCreateClick}\n          >\n            Share\n          </Button>\n        </CardActions>\n      </Card>\n    </AppScreen>\n  );\n};\n","import React, { useState, useCallback, useRef, useMemo } from \"react\";\n\nimport { AppScreen } from \"../app-screen\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  InputAdornment,\n  Icon,\n  IconButton,\n  Snackbar,\n  CardActions,\n  Button,\n  Collapse,\n} from \"@material-ui/core\";\nimport produce from \"immer\";\nimport { useServices } from \"../../services\";\nimport {\n  DEFAULT_TITLE,\n  DEFAULT_SUBMIT_LABEL,\n} from \"../../services/location-extractor-service/common\";\n\ntype CreateScreenState = {\n  title: string;\n  submitLabel: string;\n  options: string[];\n};\n\nexport const CreateScreen: React.FC = () => {\n  const { locationExtractor } = useServices();\n  const [newOption, setNewOption] = useState(\"\");\n  const [{ title, submitLabel, options }, setState] = useState<\n    CreateScreenState\n  >({\n    title: locationExtractor.getTitle() || DEFAULT_TITLE,\n    submitLabel: locationExtractor.getSubmitLabel() || DEFAULT_SUBMIT_LABEL,\n    options: locationExtractor.getOptions(),\n  });\n\n  const hasEnoughOptions = options.length > 1;\n\n  const shareLink = useMemo(\n    () => locationExtractor.getShareLink({ title, submitLabel, options }),\n    [locationExtractor, title, submitLabel, options]\n  );\n\n  const shareLinkInputRef = useRef<HTMLInputElement>(null);\n\n  const updateTitle = useCallback(\n    (value: string) =>\n      setState(\n        produce((state: CreateScreenState) => {\n          state.title = value;\n        })\n      ),\n    []\n  );\n\n  const updateSubmitLabel = useCallback(\n    (value: string) =>\n      setState(\n        produce((state: CreateScreenState) => {\n          state.submitLabel = value;\n        })\n      ),\n    []\n  );\n\n  const addOption = useCallback((value: string) => {\n    if (value) {\n      setState(\n        produce((state: CreateScreenState) => {\n          state.options.push(value);\n        })\n      );\n      setNewOption(\"\");\n    }\n  }, []);\n\n  const removeOption = useCallback((index: number) => {\n    setState(\n      produce((state: CreateScreenState) => {\n        state.options.splice(index, 1);\n      })\n    );\n  }, []);\n\n  const updateOption = useCallback((value: string, index: number) => {\n    setState(\n      produce((state: CreateScreenState) => {\n        state.options[index] = value;\n      })\n    );\n  }, []);\n\n  const [isInfoShown, setInfoShown] = useState(false);\n  const closeInfo = useCallback(() => setInfoShown(false), []);\n  const showInfo = useCallback(() => setInfoShown(true), []);\n\n  const copyLinkToClipboard = useCallback(() => {\n    const { current } = shareLinkInputRef;\n    if (current) {\n      shareLinkInputRef.current?.select();\n      shareLinkInputRef.current?.setSelectionRange(0, 9999);\n\n      document.execCommand(\"copy\");\n      showInfo();\n    }\n  }, [showInfo]);\n\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">Create and Share</Typography>\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Title\"\n            value={title}\n            onChange={(e) => updateTitle(e.target.value)}\n          />\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Submit Button Label\"\n            value={submitLabel}\n            onChange={(e) => updateSubmitLabel(e.target.value)}\n          />\n          {options.map((option, index) => (\n            <Collapse key={index} in appear>\n              <TextField\n                fullWidth\n                margin=\"normal\"\n                variant=\"outlined\"\n                label=\"Edit Option\"\n                value={option}\n                onChange={(e) => updateOption(e.target.value, index)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={() => removeOption(index)}>\n                        <Icon>close</Icon>\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Collapse>\n          ))}\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Add Option\"\n            value={newOption}\n            onChange={(e) => setNewOption(e.target.value)}\n            onBlur={(e) => addOption(newOption)}\n            onKeyUp={(e) => e.keyCode === 13 && addOption(newOption)}\n          />\n          <Collapse in={!hasEnoughOptions} mountOnEnter unmountOnExit>\n            <Typography variant=\"caption\">\n              At least two options make sense\n            </Typography>\n          </Collapse>\n          <Collapse\n            in={hasEnoughOptions}\n            mountOnEnter={true}\n            unmountOnExit={true}\n          >\n            <TextField\n              fullWidth\n              inputRef={shareLinkInputRef}\n              margin=\"normal\"\n              variant=\"outlined\"\n              label=\"Share\"\n              value={shareLink}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={copyLinkToClipboard}>\n                      <Icon>share</Icon>\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </Collapse>\n        </CardContent>\n        <Collapse\n          in={hasEnoughOptions}\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          <CardActions>\n            <Button\n              href={shareLink}\n              target=\"_blank\"\n              startIcon={<Icon>launch</Icon>}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n            >\n              Open\n            </Button>\n          </CardActions>\n        </Collapse>\n      </Card>\n      <Snackbar\n        message=\"Link copied to clipboard\"\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={isInfoShown}\n        autoHideDuration={6000}\n        onClose={closeInfo}\n      />\n    </AppScreen>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\n\nimport { OptionsScreen } from \"../options-screen\";\nimport { CongratulationsScreen } from \"../congratulation-screen\";\nimport { CreateScreen } from \"../create-screen\";\nimport { useOptions } from \"../../services/location-extractor-service/common\";\n\nexport const App: React.FC = () => {\n  const options = useOptions();\n  const [accepted, setAccepted] = useState(false);\n  const [creating, setCreating] = useState(false);\n\n  const accept = () => setAccepted(true);\n  const create = useCallback(() => {\n    setCreating(true);\n    setAccepted(false);\n  }, []);\n\n  if (creating) return <CreateScreen />;\n  if (accepted) return <CongratulationsScreen onCreateClick={create} />;\n  if (options.length > 0) return <OptionsScreen onSubmit={accept} />;\n\n  return <CreateScreen />;\n};\n","import React from \"react\";\n\nimport { Services, ServicesContext } from \"../../services\";\nimport { App } from \"../app\";\n\nimport \"./styles.css\";\n\nexport const Root: React.FC<{ services: Services }> = ({ services }) => (\n  <ServicesContext.Provider value={{ services }}>\n    <App />\n  </ServicesContext.Provider>\n);\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport { Root } from \"./components/root\";\nimport { WindowLocationExtractorService } from \"./services/location-extractor-service/window-location-extractor-service\";\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Root\n    services={{\n      locationExtractor: new WindowLocationExtractorService(window.location),\n    }}\n  />,\n  rootElement\n);\n","import { LocationParser } from \"./location-parser\";\nimport {\n  LocationExtractorService,\n  Params,\n  DEFAULT_SUBMIT_LABEL,\n  DEFAULT_TITLE,\n} from \"./common\";\n\nconst TITLE_PARAM_NAME = \"title\";\nconst OPTIONS_PARAM_NAME = \"option\";\nconst SUBMIT_LABEL_PARAM_NAME = \"submitLabel\";\n\nexport class WindowLocationExtractorService extends LocationParser\n  implements LocationExtractorService {\n  getTitle() {\n    return this.parseStringParam(TITLE_PARAM_NAME);\n  }\n\n  getSubmitLabel() {\n    return this.parseStringParam(SUBMIT_LABEL_PARAM_NAME);\n  }\n\n  getOptions() {\n    return this.parseArrayParam(OPTIONS_PARAM_NAME);\n  }\n\n  getShareLink({ title, submitLabel, options }: Params) {\n    return [\n      this.location.origin,\n      this.location.pathname,\n      \"?\",\n      this.queryString({\n        [TITLE_PARAM_NAME]: title || DEFAULT_TITLE,\n        [SUBMIT_LABEL_PARAM_NAME]: submitLabel || DEFAULT_SUBMIT_LABEL,\n        [OPTIONS_PARAM_NAME]: options || [],\n      }),\n    ].join(\"\");\n  }\n}\n","import { ParsedQuery, parse, stringify } from \"query-string\";\n\nexport abstract class LocationParser {\n  constructor(protected location: Location) {}\n\n  protected parseQuery(): ParsedQuery {\n    return parse(this.location.search);\n  }\n\n  protected parseParam(name: string): string | string[] | null | undefined {\n    return this.parseQuery()[name];\n  }\n\n  protected parseStringParam(name: string): string | undefined {\n    const param = this.parseParam(name);\n\n    return typeof param === \"string\"\n      ? param\n      : param instanceof Array\n      ? param[0]\n      : undefined;\n  }\n\n  protected parseArrayParam(name: string): string[] {\n    const param = this.parseParam(name);\n\n    if (param instanceof Array) {\n      return param;\n    }\n\n    if (typeof param === \"string\") {\n      return [param];\n    }\n\n    return [];\n  }\n\n  protected queryString(params: { [key: string]: any }): string {\n    return stringify(params);\n  }\n}\n"],"sourceRoot":""}