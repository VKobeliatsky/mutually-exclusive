{"version":3,"sources":["services/common.ts","services/hooks.ts","services/location.ts","components/page-title/page-title.tsx","components/app-screen/app-screen.tsx","components/options/option.tsx","components/options/options.tsx","components/options-screen/options-screen.tsx","components/congratulation-screen/congratulations-screen.tsx","components/create-screen/create-screen.tsx","components/app/app.tsx","components/root/root.tsx","index.tsx"],"names":["ServicesContext","createContext","Error","useServices","useContext","services","useTitle","locationExtractor","getTitle","useOptions","getOptions","PageTitle","value","Helmet","useStyles","makeStyles","root","marginTop","AppScreen","children","classes","title","Fade","in","appear","Box","Container","className","maxWidth","Option","name","label","onChange","FormControlLabel","control","Switch","checked","e","target","Options","options","useState","optionsToState","state","setState","updateOption","useCallback","names","Object","keys","targetIndex","indexOf","otherNames","length","slice","otherName","Math","floor","random","produce","FormGroup","map","key","reduce","option","OptionsScreen","onSubmit","submitLabel","getSubmitLabel","Card","CardContent","Typography","variant","CardActions","Button","fullWidth","color","onClick","CongratulationsScreen","onCreateClick","CreateScreen","newOption","setNewOption","hasEnoughOptions","shareLink","getShareLink","shareLinkInputRef","useRef","updateTitle","updateSubmitLabel","addOption","push","removeOption","index","splice","isInfoShown","setInfoShown","closeInfo","showInfo","copyLinkToClipboard","current","select","setSelectionRange","document","execCommand","TextField","margin","Collapse","InputProps","endAdornment","InputAdornment","position","IconButton","Icon","onBlur","onKeyUp","keyCode","mountOnEnter","unmountOnExit","inputRef","href","startIcon","Snackbar","message","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","App","accepted","setAccepted","creating","setCreating","create","Root","Provider","rootElement","getElementById","render","constructor","window","this","getStringParam","getArrayParam","params","location","origin","pathname","stringify","paramsToQueryString","getParam","search","parse","parsed","Array","undefined"],"mappings":"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","file":"static/js/main.0bed3447.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { LocationExtractorService } from \"./location\";\n\nexport interface Services {\n  locationExtractor: LocationExtractorService;\n}\n\nexport const ServicesContext = createContext<{ services: Services }>({\n  get services(): Services {\n    throw Error(\"services are not provided\");\n  },\n});\n","import { Services, ServicesContext } from \"./common\";\nimport { useContext } from \"react\";\n\nexport const useServices = (): Services => useContext(ServicesContext).services;\n","import { parse, stringify } from \"query-string\";\nimport { useServices } from \"./hooks\";\n\ninterface Params {\n  title?: string;\n  submitLabel?: string;\n  options?: string[];\n}\n\nexport interface LocationExtractorService {\n  getTitle(): string | undefined;\n  getOptions(): string[];\n  getSubmitLabel(): string | undefined;\n  getShareLink(params: Params): string;\n}\n\nexport const DEFAULT_TITLE = \"Choose what you like\";\nexport const DEFAULT_SUBMIT_LABEL = \"Accept\";\n\nexport const TITLE_PARAM_NAME = \"title\";\nexport const OPTIONS_PARAM_NAME = \"option\";\nexport const SUBMIT_LABEL_PARAM_NAME = \"submitLabel\";\n\nconst paramsToQueryString = ({\n  title = DEFAULT_TITLE,\n  submitLabel = DEFAULT_SUBMIT_LABEL,\n  options = [],\n}: Params) =>\n  stringify({\n    [TITLE_PARAM_NAME]: title,\n    [SUBMIT_LABEL_PARAM_NAME]: submitLabel,\n    [OPTIONS_PARAM_NAME]: options,\n  });\n\nexport class WindowLocationExtractorService\n  implements LocationExtractorService {\n  constructor(protected window: Window) {}\n\n  getTitle() {\n    return this.getStringParam(TITLE_PARAM_NAME);\n  }\n\n  getOptions() {\n    return this.getArrayParam(OPTIONS_PARAM_NAME);\n  }\n\n  getSubmitLabel() {\n    return this.getStringParam(SUBMIT_LABEL_PARAM_NAME);\n  }\n\n  getShareLink(params: Params) {\n    return `${this.window.location.origin}${\n      this.window.location.pathname\n    }?${paramsToQueryString(params)}`;\n  }\n\n  protected get location() {\n    return this.window.location;\n  }\n\n  protected getParam(name: string) {\n    const { search } = this.location;\n    return parse(search)[name];\n  }\n\n  protected getStringParam(name: string): string | undefined {\n    const parsed = this.getParam(name);\n    return typeof parsed === \"string\"\n      ? parsed\n      : parsed instanceof Array\n      ? parsed[0]\n      : undefined;\n  }\n\n  protected getArrayParam(name: string): string[] {\n    const parsed = this.getParam(name);\n    return parsed instanceof Array\n      ? parsed\n      : typeof parsed === \"string\"\n      ? [parsed]\n      : [];\n  }\n}\n\nexport const useTitle = () => useServices().locationExtractor.getTitle();\nexport const useOptions = () => useServices().locationExtractor.getOptions();\nexport const useSubmitLabel = () =>\n  useServices().locationExtractor.getSubmitLabel();\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nexport const PageTitle: React.FC<{ value: string }> = ({ value }) => (\n  <Helmet>\n    <title>{value}</title>\n  </Helmet>\n);\n","import React from \"react\";\n\nimport { Container, Fade, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { PageTitle } from \"../page-title\";\nimport { DEFAULT_TITLE, useTitle } from \"../../services/location\";\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: \"12%\",\n  },\n});\n\nexport const AppScreen: React.FC<{\n  children: NonNullable<React.ReactNode>;\n}> = ({ children }) => {\n  const classes = useStyles();\n  const title = useTitle() || DEFAULT_TITLE;\n  return (\n    <Fade in appear>\n      <Box>\n        <PageTitle value={title} />\n        <Container className={classes.root} maxWidth=\"sm\">\n          {children}\n        </Container>\n      </Box>\n    </Fade>\n  );\n};\n","import React from \"react\";\n\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nexport const Option: React.FC<{\n  name: string;\n  label?: string;\n  value: boolean;\n  onChange(value: boolean): void;\n}> = ({ name, label = name, value, onChange }) => (\n  <FormControlLabel\n    control={\n      <Switch\n        checked={value}\n        onChange={(e) => onChange(e.target.checked)}\n        name={name}\n      />\n    }\n    label={label}\n  />\n);\n","import React, { useState, useCallback } from \"react\";\nimport produce from \"immer\";\n\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nimport { useOptions } from \"../../services/location\";\nimport { Option } from \"./option\";\n\ntype OptionsState = Partial<Record<string, boolean>>;\n\nexport const Options: React.FC = () => {\n  const options = useOptions();\n  const [state, setState] = useState(() => optionsToState(options));\n\n  const updateOption = useCallback(\n    (name: string, value: boolean) => {\n      const names = Object.keys(state);\n      const targetIndex = names.indexOf(name);\n      const otherNames =\n        names.length > 1\n          ? [...names.slice(0, targetIndex), ...names.slice(targetIndex + 1)]\n          : [];\n\n      const otherName =\n        otherNames[Math.floor(Math.random() * otherNames.length)];\n\n      setState(\n        produce((state: OptionsState) => {\n          if (name in state) state[name] = value;\n          if (value && otherName in state) state[otherName] = false;\n        })\n      );\n    },\n    [state]\n  );\n\n  return (\n    <FormGroup>\n      {Object.keys(state).map((name) => (\n        <Option\n          key={name}\n          name={name}\n          value={!!state[name]}\n          onChange={(value) => updateOption(name, value)}\n        />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst optionsToState = (options: string[]) =>\n  options.reduce<OptionsState>((state, option) => {\n    state[option] = false;\n    return state;\n  }, {});\n","import React from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport {\n  useTitle,\n  DEFAULT_TITLE,\n  useSubmitLabel,\n  DEFAULT_SUBMIT_LABEL,\n} from \"../../services/location\";\nimport { AppScreen } from \"../app-screen\";\nimport { Options } from \"../options\";\nimport { CardActions, Button } from \"@material-ui/core\";\n\nexport const OptionsScreen: React.FC<{ onSubmit?(): void }> = ({\n  onSubmit,\n}) => {\n  const title = useTitle() || DEFAULT_TITLE;\n  const submitLabel = useSubmitLabel() || DEFAULT_SUBMIT_LABEL;\n\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">{title}</Typography>\n          <Options />\n        </CardContent>\n        <CardActions>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSubmit}\n          >\n            {submitLabel}\n          </Button>\n        </CardActions>\n      </Card>\n    </AppScreen>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  CardActions,\n} from \"@material-ui/core\";\n\nimport { AppScreen } from \"../app-screen\";\n\nconst CONGRATULATIONS_MESSAGE = \"Wise choice!\";\n\nexport const CongratulationsScreen: React.FC<{ onCreateClick?(): void }> = ({\n  onCreateClick,\n}) => {\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">{CONGRATULATIONS_MESSAGE}</Typography>\n        </CardContent>\n        <CardActions>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onCreateClick}\n          >\n            Share\n          </Button>\n        </CardActions>\n      </Card>\n    </AppScreen>\n  );\n};\n","import React, { useState, useCallback, useRef } from \"react\";\n\nimport { AppScreen } from \"../app-screen\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  InputAdornment,\n  Icon,\n  IconButton,\n  Snackbar,\n  CardActions,\n  Button,\n  Collapse,\n} from \"@material-ui/core\";\nimport { DEFAULT_TITLE, DEFAULT_SUBMIT_LABEL } from \"../../services/location\";\nimport produce from \"immer\";\nimport { useServices } from \"../../services\";\n\ntype CreateScreenState = {\n  title: string;\n  submitLabel: string;\n  options: string[];\n};\n\nexport const CreateScreen: React.FC = () => {\n  const { locationExtractor } = useServices();\n  const [newOption, setNewOption] = useState(\"\");\n  const [{ title, submitLabel, options }, setState] = useState<\n    CreateScreenState\n  >({\n    title: locationExtractor.getTitle() || DEFAULT_TITLE,\n    submitLabel: locationExtractor.getSubmitLabel() || DEFAULT_SUBMIT_LABEL,\n    options: locationExtractor.getOptions(),\n  });\n\n  const hasEnoughOptions = options.length > 1;\n\n  const shareLink = locationExtractor.getShareLink({\n    title,\n    submitLabel,\n    options,\n  });\n\n  const shareLinkInputRef = useRef<HTMLInputElement>(null);\n\n  const updateTitle = useCallback(\n    (value: string) =>\n      setState(\n        produce((state: CreateScreenState) => {\n          state.title = value;\n        })\n      ),\n    []\n  );\n\n  const updateSubmitLabel = useCallback(\n    (value: string) =>\n      setState(\n        produce((state: CreateScreenState) => {\n          state.submitLabel = value;\n        })\n      ),\n    []\n  );\n\n  const addOption = useCallback((value: string) => {\n    if (value) {\n      setState(\n        produce((state: CreateScreenState) => {\n          state.options.push(value);\n        })\n      );\n      setNewOption(\"\");\n    }\n  }, []);\n\n  const removeOption = useCallback((index: number) => {\n    setState(\n      produce((state: CreateScreenState) => {\n        state.options.splice(index, 1);\n      })\n    );\n  }, []);\n\n  const updateOption = useCallback((value: string, index: number) => {\n    setState(\n      produce((state: CreateScreenState) => {\n        state.options[index] = value;\n      })\n    );\n  }, []);\n\n  const [isInfoShown, setInfoShown] = useState(false);\n  const closeInfo = useCallback(() => setInfoShown(false), []);\n  const showInfo = useCallback(() => setInfoShown(true), []);\n\n  const copyLinkToClipboard = useCallback(() => {\n    const { current } = shareLinkInputRef;\n    if (current) {\n      shareLinkInputRef.current?.select();\n      shareLinkInputRef.current?.setSelectionRange(0, 9999);\n\n      document.execCommand(\"copy\");\n      showInfo();\n    }\n  }, [showInfo]);\n\n  return (\n    <AppScreen>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">Create and Share</Typography>\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Title\"\n            value={title}\n            onChange={(e) => updateTitle(e.target.value)}\n          />\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Submit Button Label\"\n            value={submitLabel}\n            onChange={(e) => updateSubmitLabel(e.target.value)}\n          />\n          {options.map((option, index) => (\n            <Collapse in appear>\n              <TextField\n                key={index}\n                fullWidth\n                margin=\"normal\"\n                variant=\"outlined\"\n                label=\"Edit Option\"\n                value={option}\n                onChange={(e) => updateOption(e.target.value, index)}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton onClick={() => removeOption(index)}>\n                        <Icon>close</Icon>\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </Collapse>\n          ))}\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            variant=\"outlined\"\n            label=\"Add Option\"\n            value={newOption}\n            onChange={(e) => setNewOption(e.target.value)}\n            onBlur={(e) => addOption(newOption)}\n            onKeyUp={(e) => e.keyCode === 13 && addOption(newOption)}\n          />\n          <Collapse in={!hasEnoughOptions} mountOnEnter unmountOnExit>\n            <Typography variant=\"caption\">\n              At least two options make sense\n            </Typography>\n          </Collapse>\n          <Collapse\n            in={hasEnoughOptions}\n            mountOnEnter={true}\n            unmountOnExit={true}\n          >\n            <TextField\n              fullWidth\n              inputRef={shareLinkInputRef}\n              margin=\"normal\"\n              variant=\"outlined\"\n              label=\"Share\"\n              value={shareLink}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton onClick={copyLinkToClipboard}>\n                      <Icon>share</Icon>\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </Collapse>\n        </CardContent>\n        <Collapse\n          in={hasEnoughOptions}\n          mountOnEnter={true}\n          unmountOnExit={true}\n        >\n          <CardActions>\n            <Button\n              href={shareLink}\n              target=\"_blank\"\n              startIcon={<Icon>launch</Icon>}\n              variant=\"contained\"\n              color=\"primary\"\n              fullWidth\n            >\n              Open\n            </Button>\n          </CardActions>\n        </Collapse>\n      </Card>\n      <Snackbar\n        message=\"Link copied to clipboard\"\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={isInfoShown}\n        autoHideDuration={6000}\n        onClose={closeInfo}\n      />\n    </AppScreen>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\n\nimport { OptionsScreen } from \"../options-screen\";\nimport { CongratulationsScreen } from \"../congratulation-screen\";\nimport { CreateScreen } from \"../create-screen\";\nimport { useOptions } from \"../../services/location\";\n\nexport const App: React.FC = () => {\n  const options = useOptions();\n  const [accepted, setAccepted] = useState(false);\n  const [creating, setCreating] = useState(false);\n\n  const accept = () => setAccepted(true);\n  const create = useCallback(() => {\n    setCreating(true);\n    setAccepted(false);\n  }, []);\n\n  if (creating) return <CreateScreen />;\n  if (accepted) return <CongratulationsScreen onCreateClick={create} />;\n  if (options.length > 0) return <OptionsScreen onSubmit={accept} />;\n\n  return <CreateScreen />;\n};\n","import React from \"react\";\n\nimport { Services, ServicesContext } from \"../../services\";\nimport { App } from \"../app\";\n\nimport \"./styles.css\";\n\nexport const Root: React.FC<{ services: Services }> = ({ services }) => (\n  <ServicesContext.Provider value={{ services }}>\n    <App />\n  </ServicesContext.Provider>\n);\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport { Root } from \"./components/root\";\nimport { WindowLocationExtractorService } from \"./services/location\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Root\n    services={{\n      locationExtractor: new WindowLocationExtractorService(window),\n    }}\n  />,\n  rootElement\n);\n"],"sourceRoot":""}